/**
 * SketchConverter
 * Copyright(c) 2020 KLab, Inc. All Rights Reserved.
 * Proprietary and Confidential - This source code is not for redistribution
 *
 * Subject to the prior written consent of KLab, Inc(Licensor) and its terms and
 * conditions, Licensor grants to you, and you hereby accept nontransferable,
 * nonexclusive limited right to access, obtain, use, copy and/or download
 * a copy of this product only for requirement purposes. You may not rent,
 * lease, loan, time share, sublicense, transfer, make generally available,
 * license, disclose, disseminate, distribute or otherwise make accessible or
 * available this product to any third party without the prior written approval
 * of Licensor. Unauthorized copying of this product, including modifications 
 * of this product or programs in which this product has been merged or included
 * with other software products is expressly forbidden.
 */

// <auto-generated />
//
// To parse this JSON data, add NuGet 'SketchConverter.Newtonsoft.Json' then do:
//
//    using SketchConverter.FileFormat;
//
//    var sketchFileFormatDesigner = SketchFileFormatDesigner.FromJson(jsonString);

namespace SketchConverter.FileFormat
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using SketchConverter.Newtonsoft.Json;
    using SketchConverter.Newtonsoft.Json.Converters;

    /// <summary>
    /// This schema describes a representation of an expanded Sketch file, that is, a Sketch file
    /// that has been unzipped, all of its entries parsed to JSON and merged into a single
    /// object. A concrete example of an expanded sketch file is the return value of the
    /// `fromFile` function in `@sketch-hq/sketch-file`
    /// </summary>
    public partial class SketchFileFormatDesigner
    {
        [JsonProperty("document")]
        public DocumentClass Document { get; protected set; }

        [JsonProperty("meta")]
        public Meta Meta { get; protected set; }

        [JsonProperty("page")]
        public PageClass Page { get; protected set; }

        [JsonProperty("user")]
        public Dictionary<string, UserValue> User { get; protected set; }

        [JsonProperty("workspace", NullValueHandling = NullValueHandling.Ignore)]
        public Workspace Workspace { get; protected set; }
    }

    public partial class DocumentClass
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("assets")]
        public AssetCollection Assets { get; protected set; }

        [JsonProperty("colorSpace")]
        public long ColorSpace { get; protected set; }

        [JsonProperty("currentPageIndex")]
        public long CurrentPageIndex { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("documentState", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, dynamic> DocumentState { get; protected set; }

        [JsonProperty("fontReferences", NullValueHandling = NullValueHandling.Ignore)]
        public FontReference[] FontReferences { get; protected set; }

        [JsonProperty("foreignLayerStyles")]
        public ForeignLayerStyle[] ForeignLayerStyles { get; protected set; }

        [JsonProperty("foreignSwatches", NullValueHandling = NullValueHandling.Ignore)]
        public ForeignSwatch[] ForeignSwatches { get; protected set; }

        [JsonProperty("foreignSymbols")]
        public ForeignSymbol[] ForeignSymbols { get; protected set; }

        [JsonProperty("foreignTextStyles")]
        public ForeignTextStyle[] ForeignTextStyles { get; protected set; }

        [JsonProperty("layerStyles")]
        public SharedStyleContainer LayerStyles { get; protected set; }

        [JsonProperty("layerSymbols", NullValueHandling = NullValueHandling.Ignore)]
        public SymbolContainer LayerSymbols { get; protected set; }

        [JsonProperty("layerTextStyles")]
        public SharedTextStyleContainer LayerTextStyles { get; protected set; }

        [JsonProperty("pages")]
        public FileReference[] Pages { get; protected set; }

        [JsonProperty("patchInfo", NullValueHandling = NullValueHandling.Ignore)]
        public PatchInfo PatchInfo { get; protected set; }

        [JsonProperty("sharedSwatches", NullValueHandling = NullValueHandling.Ignore)]
        public SwatchContainer SharedSwatches { get; protected set; }
    }

    /// <summary>
    /// Collection of global document objects
    /// </summary>
    public partial class AssetCollection
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("colorAssets")]
        public ColorAsset[] ColorAssets { get; protected set; }

        [JsonProperty("colors")]
        public Color[] Colors { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("exportPresets")]
        public dynamic[] ExportPresets { get; protected set; }

        [JsonProperty("gradientAssets")]
        public GradientAsset[] GradientAssets { get; protected set; }

        [JsonProperty("gradients")]
        public Gradient[] Gradients { get; protected set; }

        [JsonProperty("imageCollection", NullValueHandling = NullValueHandling.Ignore)]
        public ImageCollection ImageCollection { get; protected set; }

        [JsonProperty("images")]
        public ImageElement[] Images { get; protected set; }
    }

    /// <summary>
    /// Defines a reusable color asset
    /// </summary>
    public partial class ColorAsset
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("color")]
        public Color Color { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }
    }

    /// <summary>
    /// Defines a RGBA color value
    /// </summary>
    public partial class Color
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("alpha")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Alpha { get; protected set; }

        [JsonProperty("blue")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Blue { get; protected set; }

        [JsonProperty("green")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Green { get; protected set; }

        [JsonProperty("red")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Red { get; protected set; }

        [JsonProperty("swatchID", NullValueHandling = NullValueHandling.Ignore)]
        public string SwatchId { get; protected set; }
    }

    /// <summary>
    /// Defines a reusable gradient asset
    /// </summary>
    public partial class GradientAsset
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("gradient")]
        public Gradient Gradient { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }
    }

    /// <summary>
    /// Defines a gradient
    /// </summary>
    public partial class Gradient
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("elipseLength")]
        public double ElipseLength { get; protected set; }

        [JsonProperty("from")]
        public string From { get; protected set; }

        [JsonProperty("gradientType")]
        public long GradientType { get; protected set; }

        [JsonProperty("stops")]
        public GradientStop[] Stops { get; protected set; }

        [JsonProperty("to")]
        public string To { get; protected set; }
    }

    /// <summary>
    /// Defines a position on a gradient that marks the end of a transition to a new color
    /// </summary>
    public partial class GradientStop
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("color")]
        public Color Color { get; protected set; }

        [JsonProperty("position")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Position { get; protected set; }
    }

    /// <summary>
    /// Legacy object only retained for migrating older documents.
    /// </summary>
    public partial class ImageCollection
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("images")]
        public Images Images { get; protected set; }
    }

    public partial class Images
    {
    }

    /// <summary>
    /// Defines a reference to a file within the document bundle
    ///
    /// Defines inline base64 data
    /// </summary>
    public partial class ImageElement
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("_ref")]
        public string Ref { get; protected set; }

        [JsonProperty("_ref_class")]
        public ImageRefClass RefClass { get; protected set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; protected set; }

        [JsonProperty("sha1", NullValueHandling = NullValueHandling.Ignore)]
        public Sha1 Sha1 { get; protected set; }
    }

    public partial class Data
    {
        [JsonProperty("_data")]
        public string DataData { get; protected set; }
    }

    public partial class Sha1
    {
        [JsonProperty("_data")]
        public string Data { get; protected set; }
    }

    /// <summary>
    /// Defines a reference to font data embedded in the document
    /// </summary>
    public partial class FontReference
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("fontData")]
        public DataReference FontData { get; protected set; }

        [JsonProperty("fontFamilyName")]
        public string FontFamilyName { get; protected set; }

        [JsonProperty("fontFileName")]
        public string FontFileName { get; protected set; }

        [JsonProperty("options")]
        public long Options { get; protected set; }

        [JsonProperty("postscriptNames")]
        public string[] PostscriptNames { get; protected set; }
    }

    /// <summary>
    /// Defines inline base64 data
    /// </summary>
    public partial class DataReference
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("_ref")]
        public string Ref { get; protected set; }

        [JsonProperty("_ref_class")]
        public FontDataRefClass RefClass { get; protected set; }

        [JsonProperty("data")]
        public Data Data { get; protected set; }

        [JsonProperty("sha1")]
        public Sha1 Sha1 { get; protected set; }
    }

    /// <summary>
    /// Defines a layer style that has been imported from a library
    /// </summary>
    public partial class ForeignLayerStyle
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("libraryID")]
        public string LibraryId { get; protected set; }

        [JsonProperty("localSharedStyle")]
        public SharedStyle LocalSharedStyle { get; protected set; }

        [JsonProperty("remoteStyleID")]
        public string RemoteStyleId { get; protected set; }

        [JsonProperty("sourceLibraryName")]
        public string SourceLibraryName { get; protected set; }

        [JsonProperty("symbolPrivate")]
        public bool SymbolPrivate { get; protected set; }
    }

    /// <summary>
    /// Defines a reusable style
    /// </summary>
    public partial class SharedStyle
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("value")]
        public Style Value { get; protected set; }
    }

    /// <summary>
    /// Defines a layer style
    /// </summary>
    public partial class Style
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("blur", NullValueHandling = NullValueHandling.Ignore)]
        public Blur Blur { get; protected set; }

        [JsonProperty("borderOptions")]
        public BorderOptions BorderOptions { get; protected set; }

        [JsonProperty("borders", NullValueHandling = NullValueHandling.Ignore)]
        public Border[] Borders { get; protected set; }

        [JsonProperty("colorControls")]
        public ColorControls ColorControls { get; protected set; }

        [JsonProperty("contextSettings", NullValueHandling = NullValueHandling.Ignore)]
        public GraphicsContextSettings ContextSettings { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("endMarkerType")]
        public long EndMarkerType { get; protected set; }

        [JsonProperty("fills", NullValueHandling = NullValueHandling.Ignore)]
        public Fill[] Fills { get; protected set; }

        [JsonProperty("innerShadows")]
        public InnerShadow[] InnerShadows { get; protected set; }

        [JsonProperty("miterLimit")]
        public long MiterLimit { get; protected set; }

        [JsonProperty("shadows", NullValueHandling = NullValueHandling.Ignore)]
        public Shadow[] Shadows { get; protected set; }

        [JsonProperty("startMarkerType")]
        public long StartMarkerType { get; protected set; }

        [JsonProperty("textStyle", NullValueHandling = NullValueHandling.Ignore)]
        public TextStyle TextStyle { get; protected set; }

        [JsonProperty("windingRule")]
        public long WindingRule { get; protected set; }
    }

    /// <summary>
    /// Defines a blur style
    /// </summary>
    public partial class Blur
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("center")]
        public string Center { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("motionAngle", NullValueHandling = NullValueHandling.Ignore)]
        public double? MotionAngle { get; protected set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? Radius { get; protected set; }

        [JsonProperty("saturation")]
        public double Saturation { get; protected set; }

        [JsonProperty("type")]
        public long Type { get; protected set; }
    }

    /// <summary>
    /// Defines border options
    /// </summary>
    public partial class BorderOptions
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("dashPattern")]
        public double[] DashPattern { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("lineCapStyle")]
        public long LineCapStyle { get; protected set; }

        [JsonProperty("lineJoinStyle")]
        public long LineJoinStyle { get; protected set; }
    }

    /// <summary>
    /// Defines a border style
    /// </summary>
    public partial class Border
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("color")]
        public Color Color { get; protected set; }

        [JsonProperty("contextSettings")]
        public GraphicsContextSettings ContextSettings { get; protected set; }

        [JsonProperty("fillType")]
        public long FillType { get; protected set; }

        [JsonProperty("gradient")]
        public Gradient Gradient { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("position")]
        public long Position { get; protected set; }

        [JsonProperty("thickness")]
        public double Thickness { get; protected set; }
    }

    /// <summary>
    /// Defines the opacity and blend mode of a style or shadow
    /// </summary>
    public partial class GraphicsContextSettings
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("blendMode")]
        public long BlendMode { get; protected set; }

        [JsonProperty("opacity")]
        public double Opacity { get; protected set; }
    }

    /// <summary>
    /// Defines color adjust styles on images
    /// </summary>
    public partial class ColorControls
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("brightness")]
        [JsonConverter(typeof(FluffyMinMaxValueCheckConverter))]
        public double Brightness { get; protected set; }

        [JsonProperty("contrast")]
        [JsonConverter(typeof(FluffyMinMaxValueCheckConverter))]
        public double Contrast { get; protected set; }

        [JsonProperty("hue")]
        [JsonConverter(typeof(FluffyMinMaxValueCheckConverter))]
        public double Hue { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("saturation")]
        [JsonConverter(typeof(FluffyMinMaxValueCheckConverter))]
        public double Saturation { get; protected set; }
    }

    /// <summary>
    /// Defines a fill style
    /// </summary>
    public partial class Fill
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("color")]
        public Color Color { get; protected set; }

        [JsonProperty("contextSettings")]
        public GraphicsContextSettings ContextSettings { get; protected set; }

        [JsonProperty("fillType")]
        public long FillType { get; protected set; }

        [JsonProperty("gradient")]
        public Gradient Gradient { get; protected set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public ImageElement Image { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("noiseIndex")]
        public double NoiseIndex { get; protected set; }

        [JsonProperty("noiseIntensity")]
        public double NoiseIntensity { get; protected set; }

        [JsonProperty("patternFillType")]
        public long PatternFillType { get; protected set; }

        [JsonProperty("patternTileScale")]
        public double PatternTileScale { get; protected set; }
    }

    /// <summary>
    /// Defines an inner shadow style
    /// </summary>
    public partial class InnerShadow
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("blurRadius")]
        public double BlurRadius { get; protected set; }

        [JsonProperty("color")]
        public Color Color { get; protected set; }

        [JsonProperty("contextSettings")]
        public GraphicsContextSettings ContextSettings { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("offsetX")]
        public double OffsetX { get; protected set; }

        [JsonProperty("offsetY")]
        public double OffsetY { get; protected set; }

        [JsonProperty("spread")]
        public double Spread { get; protected set; }
    }

    /// <summary>
    /// Defines a shadow style
    /// </summary>
    public partial class Shadow
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("blurRadius")]
        public double BlurRadius { get; protected set; }

        [JsonProperty("color")]
        public Color Color { get; protected set; }

        [JsonProperty("contextSettings")]
        public GraphicsContextSettings ContextSettings { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("offsetX")]
        public double OffsetX { get; protected set; }

        [JsonProperty("offsetY")]
        public double OffsetY { get; protected set; }

        [JsonProperty("spread")]
        public double Spread { get; protected set; }
    }

    /// <summary>
    /// Defines text style
    /// </summary>
    public partial class TextStyle
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("encodedAttributes")]
        public EncodedAttributes EncodedAttributes { get; protected set; }

        [JsonProperty("verticalAlignment")]
        public long VerticalAlignment { get; protected set; }
    }

    public partial class EncodedAttributes
    {
        [JsonProperty("kerning", NullValueHandling = NullValueHandling.Ignore)]
        public double? Kerning { get; protected set; }

        [JsonProperty("MSAttributedStringColorAttribute", NullValueHandling = NullValueHandling.Ignore)]
        public Color MsAttributedStringColorAttribute { get; protected set; }

        [JsonProperty("MSAttributedStringFontAttribute")]
        public FontDescriptor MsAttributedStringFontAttribute { get; protected set; }

        [JsonProperty("MSAttributedStringTextTransformAttribute", NullValueHandling = NullValueHandling.Ignore)]
        public long? MsAttributedStringTextTransformAttribute { get; protected set; }

        [JsonProperty("paragraphStyle", NullValueHandling = NullValueHandling.Ignore)]
        public ParagraphStyle ParagraphStyle { get; protected set; }

        [JsonProperty("strikethroughStyle", NullValueHandling = NullValueHandling.Ignore)]
        public long? StrikethroughStyle { get; protected set; }

        [JsonProperty("textStyleVerticalAlignmentKey", NullValueHandling = NullValueHandling.Ignore)]
        public long? TextStyleVerticalAlignmentKey { get; protected set; }

        [JsonProperty("underlineStyle", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnderlineStyle { get; protected set; }
    }

    /// <summary>
    /// Defines a font selection
    /// </summary>
    public partial class FontDescriptor
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("attributes")]
        public MsAttributedStringFontAttributeAttributes Attributes { get; protected set; }
    }

    public partial class MsAttributedStringFontAttributeAttributes
    {
        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("size")]
        public double Size { get; protected set; }

        [JsonProperty("variation", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, dynamic> Variation { get; protected set; }
    }

    /// <summary>
    /// Defines the paragraph style within a text style
    /// </summary>
    public partial class ParagraphStyle
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("alignment", NullValueHandling = NullValueHandling.Ignore)]
        public long? Alignment { get; protected set; }

        [JsonProperty("allowsDefaultTighteningForTruncation", NullValueHandling = NullValueHandling.Ignore)]
        public double? AllowsDefaultTighteningForTruncation { get; protected set; }

        [JsonProperty("maximumLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaximumLineHeight { get; protected set; }

        [JsonProperty("minimumLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinimumLineHeight { get; protected set; }

        [JsonProperty("paragraphSpacing", NullValueHandling = NullValueHandling.Ignore)]
        public double? ParagraphSpacing { get; protected set; }
    }

    /// <summary>
    /// Defines a swatch that has been imported from a library
    /// </summary>
    public partial class ForeignSwatch
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("libraryID")]
        public string LibraryId { get; protected set; }

        [JsonProperty("localSwatch")]
        public Swatch LocalSwatch { get; protected set; }

        [JsonProperty("remoteSwatchID")]
        public string RemoteSwatchId { get; protected set; }

        [JsonProperty("sourceLibraryName")]
        public string SourceLibraryName { get; protected set; }

        [JsonProperty("symbolPrivate")]
        public bool SymbolPrivate { get; protected set; }
    }

    /// <summary>
    /// Defines a swatch color variable.
    /// </summary>
    public partial class Swatch
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("value")]
        public Color Value { get; protected set; }
    }

    /// <summary>
    /// Defines a symbol that has been imported from a library
    /// </summary>
    public partial class ForeignSymbol
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("libraryID")]
        public string LibraryId { get; protected set; }

        [JsonProperty("missingLibraryFontAcknowledged", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MissingLibraryFontAcknowledged { get; protected set; }

        [JsonProperty("originalMaster")]
        public SymbolSourceLayer OriginalMaster { get; protected set; }

        [JsonProperty("sourceLibraryName")]
        public string SourceLibraryName { get; protected set; }

        [JsonProperty("symbolMaster")]
        public SymbolSourceLayer SymbolMaster { get; protected set; }

        [JsonProperty("symbolPrivate")]
        public bool SymbolPrivate { get; protected set; }
    }

    /// <summary>
    /// A symbol source layer represents a reusable group of layers
    /// </summary>
    public partial class SymbolSourceLayer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("allowsOverrides")]
        public bool AllowsOverrides { get; protected set; }

        [JsonProperty("backgroundColor")]
        public Color BackgroundColor { get; protected set; }

        [JsonProperty("booleanOperation")]
        public long BooleanOperation { get; protected set; }

        [JsonProperty("clippingMaskMode", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClippingMaskMode { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("exportOptions")]
        public ExportOptions ExportOptions { get; protected set; }

        [JsonProperty("flow", NullValueHandling = NullValueHandling.Ignore)]
        public FlowConnection Flow { get; protected set; }

        [JsonProperty("frame")]
        public Rect Frame { get; protected set; }

        [JsonProperty("grid", NullValueHandling = NullValueHandling.Ignore)]
        public SimpleGrid Grid { get; protected set; }

        [JsonProperty("groupLayout", NullValueHandling = NullValueHandling.Ignore)]
        public GroupLayout GroupLayout { get; protected set; }

        [JsonProperty("hasBackgroundColor")]
        public bool HasBackgroundColor { get; protected set; }

        [JsonProperty("hasClickThrough")]
        public bool HasClickThrough { get; protected set; }

        [JsonProperty("hasClippingMask", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasClippingMask { get; protected set; }

        [JsonProperty("horizontalRulerData")]
        public RulerData HorizontalRulerData { get; protected set; }

        [JsonProperty("includeBackgroundColorInExport")]
        public bool IncludeBackgroundColorInExport { get; protected set; }

        [JsonProperty("includeBackgroundColorInInstance")]
        public bool IncludeBackgroundColorInInstance { get; protected set; }

        [JsonProperty("isFixedToViewport")]
        public bool IsFixedToViewport { get; protected set; }

        [JsonProperty("isFlippedHorizontal")]
        public bool IsFlippedHorizontal { get; protected set; }

        [JsonProperty("isFlippedVertical")]
        public bool IsFlippedVertical { get; protected set; }

        [JsonProperty("isFlowHome")]
        public bool IsFlowHome { get; protected set; }

        [JsonProperty("isLocked")]
        public bool IsLocked { get; protected set; }

        [JsonProperty("isVisible")]
        public bool IsVisible { get; protected set; }

        [JsonProperty("layerListExpandedType")]
        public long LayerListExpandedType { get; protected set; }

        /// <summary>
        /// Symbol sources can contain any layer or layer group except root layers such as artboards
        /// and other symbol sources
        /// </summary>
        [JsonProperty("layers")]
        public OriginalMasterLayer[] Layers { get; protected set; }

        [JsonProperty("layout", NullValueHandling = NullValueHandling.Ignore)]
        public LayoutGrid Layout { get; protected set; }

        [JsonProperty("maintainScrollPosition", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MaintainScrollPosition { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("nameIsFixed")]
        public bool NameIsFixed { get; protected set; }

        [JsonProperty("overrideProperties")]
        public OverrideProperty[] OverrideProperties { get; protected set; }

        [JsonProperty("presetDictionary", NullValueHandling = NullValueHandling.Ignore)]
        public OriginalMasterPresetDictionary PresetDictionary { get; protected set; }

        [JsonProperty("resizesContent")]
        public bool ResizesContent { get; protected set; }

        /// <summary>
        /// Bitfield representing the resizing constraint
        /// </summary>
        [JsonProperty("resizingConstraint")]
        public long ResizingConstraint { get; protected set; }

        [JsonProperty("resizingType")]
        public long ResizingType { get; protected set; }

        [JsonProperty("rotation")]
        public double Rotation { get; protected set; }

        [JsonProperty("sharedStyleID", NullValueHandling = NullValueHandling.Ignore)]
        public string SharedStyleId { get; protected set; }

        [JsonProperty("shouldBreakMaskChain")]
        public bool ShouldBreakMaskChain { get; protected set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; protected set; }

        [JsonProperty("symbolID")]
        public string SymbolId { get; protected set; }

        [JsonProperty("userInfo", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, dynamic> UserInfo { get; protected set; }

        [JsonProperty("verticalRulerData")]
        public RulerData VerticalRulerData { get; protected set; }
    }

    /// <summary>
    /// Defines a layer's export options
    /// </summary>
    public partial class ExportOptions
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("exportFormats")]
        public ExportFormat[] ExportFormats { get; protected set; }

        [JsonProperty("includedLayerIds")]
        public string[] IncludedLayerIds { get; protected set; }

        [JsonProperty("layerOptions")]
        public long LayerOptions { get; protected set; }

        [JsonProperty("shouldTrim")]
        public bool ShouldTrim { get; protected set; }
    }

    /// <summary>
    /// Defines an export format, as listed in a layer's export options
    /// </summary>
    public partial class ExportFormat
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("absoluteSize")]
        public long AbsoluteSize { get; protected set; }

        [JsonProperty("fileFormat")]
        public ExportFileFormat FileFormat { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("namingScheme", NullValueHandling = NullValueHandling.Ignore)]
        public long? NamingScheme { get; protected set; }

        [JsonProperty("scale")]
        public double Scale { get; protected set; }

        [JsonProperty("visibleScaleType")]
        public long VisibleScaleType { get; protected set; }
    }

    /// <summary>
    /// Defines a connection between elements in a prototype
    /// </summary>
    public partial class FlowConnection
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("animationType")]
        public long AnimationType { get; protected set; }

        [JsonProperty("destinationArtboardID")]
        public dynamic DestinationArtboardId { get; protected set; }

        [JsonProperty("maintainScrollPosition", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MaintainScrollPosition { get; protected set; }
    }

    /// <summary>
    /// Defines an abstract rectangle
    /// </summary>
    public partial class Rect
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("constrainProportions")]
        public bool ConstrainProportions { get; protected set; }

        [JsonProperty("height")]
        public double Height { get; protected set; }

        [JsonProperty("width")]
        public double Width { get; protected set; }

        [JsonProperty("x")]
        public double X { get; protected set; }

        [JsonProperty("y")]
        public double Y { get; protected set; }
    }

    /// <summary>
    /// Defines the grid settings for an artboard or page
    /// </summary>
    public partial class SimpleGrid
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("gridSize")]
        public long GridSize { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("thickGridTimes")]
        public long ThickGridTimes { get; protected set; }
    }

    /// <summary>
    /// Normal group layout
    ///
    /// Inferred group layout defines smart layout options
    /// </summary>
    public partial class GroupLayout
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("axis", NullValueHandling = NullValueHandling.Ignore)]
        public long? Axis { get; protected set; }

        [JsonProperty("layoutAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public long? LayoutAnchor { get; protected set; }

        [JsonProperty("maxSize", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxSize { get; protected set; }

        [JsonProperty("minSize", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinSize { get; protected set; }
    }

    /// <summary>
    /// Defines persisted ruler positions on artboards, pages and symbols
    /// </summary>
    public partial class RulerData
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("base")]
        public long Base { get; protected set; }

        [JsonProperty("guides")]
        public long[] Guides { get; protected set; }
    }

    /// <summary>
    /// Group layers are a document organisation aid
    ///
    /// Oval layers are the result of adding an oval shape to the canvas
    ///
    /// Polygon layers are the result of adding a polygon shape to the canvas
    ///
    /// Rectangle layers are the result of adding a rectangle shape to the canvas
    ///
    /// Shape path layers are the result of adding a vector layer
    ///
    /// Star layers are the result of adding a star shape to the canvas
    ///
    /// Triangle layers are the result of adding a triangle shape to the canvas
    ///
    /// Shape groups layers group together multiple shape layers
    ///
    /// A text layer represents a discrete block or line of text
    ///
    /// Symbol instance layers represent an instance of a symbol source
    ///
    /// Slice layers allow the content beneath their frame to be exported
    ///
    /// Hotspot layers define clickable hotspots for use with prototypes
    ///
    /// Bitmap layers house a single image
    /// </summary>
    public partial class OriginalMasterLayer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("booleanOperation")]
        public long BooleanOperation { get; protected set; }

        [JsonProperty("clippingMaskMode", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClippingMaskMode { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("exportOptions")]
        public ExportOptions ExportOptions { get; protected set; }

        [JsonProperty("flow", NullValueHandling = NullValueHandling.Ignore)]
        public FlowConnection Flow { get; protected set; }

        [JsonProperty("frame")]
        public Rect Frame { get; protected set; }

        [JsonProperty("groupLayout", NullValueHandling = NullValueHandling.Ignore)]
        public GroupLayout GroupLayout { get; protected set; }

        [JsonProperty("hasClickThrough", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasClickThrough { get; protected set; }

        [JsonProperty("hasClippingMask", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasClippingMask { get; protected set; }

        [JsonProperty("isFixedToViewport")]
        public bool IsFixedToViewport { get; protected set; }

        [JsonProperty("isFlippedHorizontal")]
        public bool IsFlippedHorizontal { get; protected set; }

        [JsonProperty("isFlippedVertical")]
        public bool IsFlippedVertical { get; protected set; }

        [JsonProperty("isLocked")]
        public bool IsLocked { get; protected set; }

        [JsonProperty("isVisible")]
        public bool IsVisible { get; protected set; }

        [JsonProperty("layerListExpandedType")]
        public long LayerListExpandedType { get; protected set; }

        [JsonProperty("layers", NullValueHandling = NullValueHandling.Ignore)]
        public OriginalMasterLayer[] Layers { get; protected set; }

        [JsonProperty("maintainScrollPosition", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MaintainScrollPosition { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("nameIsFixed")]
        public bool NameIsFixed { get; protected set; }

        /// <summary>
        /// Bitfield representing the resizing constraint
        /// </summary>
        [JsonProperty("resizingConstraint")]
        public long ResizingConstraint { get; protected set; }

        [JsonProperty("resizingType")]
        public long ResizingType { get; protected set; }

        [JsonProperty("rotation")]
        public double Rotation { get; protected set; }

        [JsonProperty("sharedStyleID", NullValueHandling = NullValueHandling.Ignore)]
        public string SharedStyleId { get; protected set; }

        [JsonProperty("shouldBreakMaskChain")]
        public bool ShouldBreakMaskChain { get; protected set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; protected set; }

        [JsonProperty("userInfo", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, dynamic> UserInfo { get; protected set; }

        [JsonProperty("edited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Edited { get; protected set; }

        [JsonProperty("isClosed", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsClosed { get; protected set; }

        [JsonProperty("pointRadiusBehaviour", NullValueHandling = NullValueHandling.Ignore)]
        public long? PointRadiusBehaviour { get; protected set; }

        [JsonProperty("points", NullValueHandling = NullValueHandling.Ignore)]
        public CurvePoint[] Points { get; protected set; }

        [JsonProperty("numberOfPoints", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfPoints { get; protected set; }

        [JsonProperty("fixedRadius", NullValueHandling = NullValueHandling.Ignore)]
        public double? FixedRadius { get; protected set; }

        [JsonProperty("hasConvertedToNewRoundCorners", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasConvertedToNewRoundCorners { get; protected set; }

        [JsonProperty("needsConvertionToNewRoundCorners", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NeedsConvertionToNewRoundCorners { get; protected set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? Radius { get; protected set; }

        [JsonProperty("isEquilateral", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEquilateral { get; protected set; }

        [JsonProperty("windingRule", NullValueHandling = NullValueHandling.Ignore)]
        public long? WindingRule { get; protected set; }

        [JsonProperty("attributedString", NullValueHandling = NullValueHandling.Ignore)]
        public AttributedString AttributedString { get; protected set; }

        [JsonProperty("automaticallyDrawOnUnderlyingPath", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AutomaticallyDrawOnUnderlyingPath { get; protected set; }

        [JsonProperty("dontSynchroniseWithSymbol", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DontSynchroniseWithSymbol { get; protected set; }

        [JsonProperty("glyphBounds", NullValueHandling = NullValueHandling.Ignore)]
        public string GlyphBounds { get; protected set; }

        [JsonProperty("lineSpacingBehaviour", NullValueHandling = NullValueHandling.Ignore)]
        public long? LineSpacingBehaviour { get; protected set; }

        [JsonProperty("textBehaviour", NullValueHandling = NullValueHandling.Ignore)]
        public long? TextBehaviour { get; protected set; }

        [JsonProperty("horizontalSpacing", NullValueHandling = NullValueHandling.Ignore)]
        public double? HorizontalSpacing { get; protected set; }

        [JsonProperty("overrideValues", NullValueHandling = NullValueHandling.Ignore)]
        public OverrideValue[] OverrideValues { get; protected set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public double? Scale { get; protected set; }

        [JsonProperty("symbolID", NullValueHandling = NullValueHandling.Ignore)]
        public string SymbolId { get; protected set; }

        [JsonProperty("verticalSpacing", NullValueHandling = NullValueHandling.Ignore)]
        public double? VerticalSpacing { get; protected set; }

        [JsonProperty("backgroundColor", NullValueHandling = NullValueHandling.Ignore)]
        public Color BackgroundColor { get; protected set; }

        [JsonProperty("hasBackgroundColor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasBackgroundColor { get; protected set; }

        [JsonProperty("clippingMask", NullValueHandling = NullValueHandling.Ignore)]
        public string ClippingMask { get; protected set; }

        [JsonProperty("fillReplacesImage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FillReplacesImage { get; protected set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public ImageElement Image { get; protected set; }

        [JsonProperty("intendedDPI", NullValueHandling = NullValueHandling.Ignore)]
        public long? IntendedDpi { get; protected set; }
    }

    /// <summary>
    /// Defines character strings and associated styling applied to character ranges
    /// </summary>
    public partial class AttributedString
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("attributes")]
        public StringAttribute[] Attributes { get; protected set; }

        [JsonProperty("string")]
        public string String { get; protected set; }
    }

    /// <summary>
    /// Defines an attribute assigned to a range of characters in an attributed string
    /// </summary>
    public partial class StringAttribute
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("attributes")]
        public AttributeAttributes Attributes { get; protected set; }

        [JsonProperty("length")]
        public long Length { get; protected set; }

        [JsonProperty("location")]
        public long Location { get; protected set; }
    }

    public partial class AttributeAttributes
    {
        [JsonProperty("kerning", NullValueHandling = NullValueHandling.Ignore)]
        public double? Kerning { get; protected set; }

        [JsonProperty("MSAttributedStringColorAttribute", NullValueHandling = NullValueHandling.Ignore)]
        public Color MsAttributedStringColorAttribute { get; protected set; }

        [JsonProperty("MSAttributedStringFontAttribute")]
        public FontDescriptor MsAttributedStringFontAttribute { get; protected set; }

        [JsonProperty("paragraphStyle", NullValueHandling = NullValueHandling.Ignore)]
        public ParagraphStyle ParagraphStyle { get; protected set; }

        [JsonProperty("textStyleVerticalAlignmentKey", NullValueHandling = NullValueHandling.Ignore)]
        public long? TextStyleVerticalAlignmentKey { get; protected set; }
    }

    /// <summary>
    /// Defines an individual symbol override
    /// </summary>
    public partial class OverrideValue
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID", NullValueHandling = NullValueHandling.Ignore)]
        public string DoObjectId { get; protected set; }

        [JsonProperty("overrideName")]
        public string OverrideName { get; protected set; }

        [JsonProperty("value")]
        public Value Value { get; protected set; }
    }

    /// <summary>
    /// Defines a reference to a file within the document bundle
    ///
    /// Defines inline base64 data
    /// </summary>
    public partial class Reference
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("_ref")]
        public string Ref { get; protected set; }

        [JsonProperty("_ref_class")]
        public ImageRefClass RefClass { get; protected set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; protected set; }

        [JsonProperty("sha1", NullValueHandling = NullValueHandling.Ignore)]
        public Sha1 Sha1 { get; protected set; }
    }

    /// <summary>
    /// Defines a shape layer curve point
    /// </summary>
    public partial class CurvePoint
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("cornerRadius")]
        public double CornerRadius { get; protected set; }

        [JsonProperty("cornerStyle")]
        public long CornerStyle { get; protected set; }

        [JsonProperty("curveFrom")]
        public string CurveFrom { get; protected set; }

        [JsonProperty("curveMode")]
        public long CurveMode { get; protected set; }

        [JsonProperty("curveTo")]
        public string CurveTo { get; protected set; }

        [JsonProperty("hasCurveFrom")]
        public bool HasCurveFrom { get; protected set; }

        [JsonProperty("hasCurveTo")]
        public bool HasCurveTo { get; protected set; }

        [JsonProperty("point")]
        public string Point { get; protected set; }
    }

    /// <summary>
    /// Defines the layout settings for an artboard or page
    /// </summary>
    public partial class LayoutGrid
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("columnWidth")]
        public long ColumnWidth { get; protected set; }

        [JsonProperty("drawHorizontal")]
        public bool DrawHorizontal { get; protected set; }

        [JsonProperty("drawHorizontalLines")]
        public bool DrawHorizontalLines { get; protected set; }

        [JsonProperty("drawVertical")]
        public bool DrawVertical { get; protected set; }

        [JsonProperty("gutterHeight")]
        public long GutterHeight { get; protected set; }

        [JsonProperty("guttersOutside")]
        public bool GuttersOutside { get; protected set; }

        [JsonProperty("gutterWidth")]
        public long GutterWidth { get; protected set; }

        [JsonProperty("horizontalOffset")]
        public long HorizontalOffset { get; protected set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; protected set; }

        [JsonProperty("numberOfColumns")]
        public long NumberOfColumns { get; protected set; }

        [JsonProperty("rowHeightMultiplication")]
        public long RowHeightMultiplication { get; protected set; }

        [JsonProperty("totalWidth")]
        public long TotalWidth { get; protected set; }
    }

    /// <summary>
    /// Defines override properties on symbol sources
    /// </summary>
    public partial class OverrideProperty
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("canOverride")]
        public bool CanOverride { get; protected set; }

        [JsonProperty("overrideName")]
        public string OverrideName { get; protected set; }
    }

    public partial class OriginalMasterPresetDictionary
    {
    }

    /// <summary>
    /// Defines a text style that has been imported from a library
    /// </summary>
    public partial class ForeignTextStyle
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("libraryID")]
        public string LibraryId { get; protected set; }

        [JsonProperty("localSharedStyle")]
        public SharedStyle LocalSharedStyle { get; protected set; }

        [JsonProperty("missingLibraryFontAcknowledged", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MissingLibraryFontAcknowledged { get; protected set; }

        [JsonProperty("remoteStyleID")]
        public string RemoteStyleId { get; protected set; }

        [JsonProperty("sourceLibraryName")]
        public string SourceLibraryName { get; protected set; }

        [JsonProperty("symbolPrivate")]
        public bool SymbolPrivate { get; protected set; }
    }

    /// <summary>
    /// Defines a document's list of reusable styles
    /// </summary>
    public partial class SharedStyleContainer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID", NullValueHandling = NullValueHandling.Ignore)]
        public string DoObjectId { get; protected set; }

        [JsonProperty("objects")]
        public SharedStyle[] Objects { get; protected set; }
    }

    /// <summary>
    /// Legacy object only retained for migrating older documents.
    /// </summary>
    public partial class SymbolContainer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID", NullValueHandling = NullValueHandling.Ignore)]
        public string DoObjectId { get; protected set; }

        [JsonProperty("objects")]
        public dynamic[] Objects { get; protected set; }
    }

    /// <summary>
    /// Defines a document's list of reusable text styles
    /// </summary>
    public partial class SharedTextStyleContainer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID", NullValueHandling = NullValueHandling.Ignore)]
        public string DoObjectId { get; protected set; }

        [JsonProperty("objects")]
        public SharedStyle[] Objects { get; protected set; }
    }

    /// <summary>
    /// Defines a reference to a file within the document bundle
    /// </summary>
    public partial class FileReference
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("_ref")]
        public string Ref { get; protected set; }

        [JsonProperty("_ref_class")]
        public PageRefClass RefClass { get; protected set; }
    }

    /// <summary>
    /// Defines ephemeral patch information related to the Cloud collaborative editing feature.
    /// This information will only be found behind-the-scenes in Cloud documents and won't be
    /// relevant or visible to users parsing or generating their own Sketch documents.
    /// </summary>
    public partial class PatchInfo
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("baseVersionID")]
        public string BaseVersionId { get; protected set; }

        [JsonProperty("lastIntegratedPatchID")]
        public string LastIntegratedPatchId { get; protected set; }

        [JsonProperty("localPatches")]
        public FileReference[] LocalPatches { get; protected set; }

        [JsonProperty("receivedPatches")]
        public FileReference[] ReceivedPatches { get; protected set; }
    }

    /// <summary>
    /// Defines a document's list of swatches
    /// </summary>
    public partial class SwatchContainer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("do_objectID", NullValueHandling = NullValueHandling.Ignore)]
        public string DoObjectId { get; protected set; }

        [JsonProperty("objects")]
        public Swatch[] Objects { get; protected set; }
    }

    /// <summary>
    /// Contains metadata about the Sketch file - information about pages and artboards appearing
    /// in the file, fonts used, the version of Sketch used to save the file etc.
    /// </summary>
    public partial class Meta
    {
        [JsonProperty("app")]
        public SketchBundleIdentifier App { get; protected set; }

        [JsonProperty("appVersion")]
        public string AppVersion { get; protected set; }

        [JsonProperty("autosaved")]
        public long Autosaved { get; protected set; }

        [JsonProperty("build")]
        public long Build { get; protected set; }

        [JsonProperty("coeditCompatibilityVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? CoeditCompatibilityVersion { get; protected set; }

        [JsonProperty("commit")]
        public string Commit { get; protected set; }

        [JsonProperty("compatibilityVersion")]
        public dynamic CompatibilityVersion { get; protected set; }

        [JsonProperty("created")]
        public Created Created { get; protected set; }

        [JsonProperty("pagesAndArtboards")]
        public PagesAndArtboards PagesAndArtboards { get; protected set; }

        [JsonProperty("saveHistory")]
        public string[] SaveHistory { get; protected set; }

        [JsonProperty("variant")]
        public SketchVariant Variant { get; protected set; }

        [JsonProperty("version")]
        public long Version { get; protected set; }
    }

    public partial class Created
    {
        [JsonProperty("app")]
        public SketchBundleIdentifier App { get; protected set; }

        [JsonProperty("appVersion")]
        public string AppVersion { get; protected set; }

        [JsonProperty("build")]
        public long Build { get; protected set; }

        [JsonProperty("coeditCompatibilityVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? CoeditCompatibilityVersion { get; protected set; }

        [JsonProperty("commit")]
        public string Commit { get; protected set; }

        [JsonProperty("compatibilityVersion")]
        public double CompatibilityVersion { get; protected set; }

        [JsonProperty("variant")]
        public SketchVariant Variant { get; protected set; }

        [JsonProperty("version")]
        public double Version { get; protected set; }
    }

    public partial class PagesAndArtboards
    {
    }

    /// <summary>
    /// Page layers are the top level organisational abstraction within a document
    /// </summary>
    public partial class PageClass
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("booleanOperation")]
        public long BooleanOperation { get; protected set; }

        [JsonProperty("clippingMaskMode", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClippingMaskMode { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("exportOptions")]
        public ExportOptions ExportOptions { get; protected set; }

        [JsonProperty("flow", NullValueHandling = NullValueHandling.Ignore)]
        public FlowConnection Flow { get; protected set; }

        [JsonProperty("frame")]
        public Rect Frame { get; protected set; }

        [JsonProperty("grid", NullValueHandling = NullValueHandling.Ignore)]
        public SimpleGrid Grid { get; protected set; }

        [JsonProperty("groupLayout", NullValueHandling = NullValueHandling.Ignore)]
        public GroupLayout GroupLayout { get; protected set; }

        [JsonProperty("hasClickThrough")]
        public bool HasClickThrough { get; protected set; }

        [JsonProperty("hasClippingMask", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasClippingMask { get; protected set; }

        [JsonProperty("horizontalRulerData")]
        public RulerData HorizontalRulerData { get; protected set; }

        [JsonProperty("isFixedToViewport")]
        public bool IsFixedToViewport { get; protected set; }

        [JsonProperty("isFlippedHorizontal")]
        public bool IsFlippedHorizontal { get; protected set; }

        [JsonProperty("isFlippedVertical")]
        public bool IsFlippedVertical { get; protected set; }

        [JsonProperty("isLocked")]
        public bool IsLocked { get; protected set; }

        [JsonProperty("isVisible")]
        public bool IsVisible { get; protected set; }

        [JsonProperty("layerListExpandedType")]
        public long LayerListExpandedType { get; protected set; }

        /// <summary>
        /// Pages can contain any layer or layer group but no pages
        /// </summary>
        [JsonProperty("layers")]
        public PageLayer[] Layers { get; protected set; }

        [JsonProperty("layout", NullValueHandling = NullValueHandling.Ignore)]
        public LayoutGrid Layout { get; protected set; }

        [JsonProperty("maintainScrollPosition", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MaintainScrollPosition { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("nameIsFixed")]
        public bool NameIsFixed { get; protected set; }

        /// <summary>
        /// Bitfield representing the resizing constraint
        /// </summary>
        [JsonProperty("resizingConstraint")]
        public long ResizingConstraint { get; protected set; }

        [JsonProperty("resizingType")]
        public long ResizingType { get; protected set; }

        [JsonProperty("rotation")]
        public double Rotation { get; protected set; }

        [JsonProperty("sharedStyleID", NullValueHandling = NullValueHandling.Ignore)]
        public string SharedStyleId { get; protected set; }

        [JsonProperty("shouldBreakMaskChain")]
        public bool ShouldBreakMaskChain { get; protected set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; protected set; }

        [JsonProperty("userInfo", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, dynamic> UserInfo { get; protected set; }

        [JsonProperty("verticalRulerData")]
        public RulerData VerticalRulerData { get; protected set; }
    }

    /// <summary>
    /// Artboard layers are a document organisation aid. They have a fixed frame that usually map
    /// to variations of device dimensions or viewport sizes
    ///
    /// Group layers are a document organisation aid
    ///
    /// Oval layers are the result of adding an oval shape to the canvas
    ///
    /// Polygon layers are the result of adding a polygon shape to the canvas
    ///
    /// Rectangle layers are the result of adding a rectangle shape to the canvas
    ///
    /// Shape path layers are the result of adding a vector layer
    ///
    /// Star layers are the result of adding a star shape to the canvas
    ///
    /// Triangle layers are the result of adding a triangle shape to the canvas
    ///
    /// Shape groups layers group together multiple shape layers
    ///
    /// A text layer represents a discrete block or line of text
    ///
    /// A symbol source layer represents a reusable group of layers
    ///
    /// Symbol instance layers represent an instance of a symbol source
    ///
    /// Slice layers allow the content beneath their frame to be exported
    ///
    /// Hotspot layers define clickable hotspots for use with prototypes
    ///
    /// Bitmap layers house a single image
    /// </summary>
    public partial class PageLayer
    {
        [JsonProperty("_class")]
        public dynamic Class { get; protected set; }

        [JsonProperty("backgroundColor", NullValueHandling = NullValueHandling.Ignore)]
        public Color BackgroundColor { get; protected set; }

        [JsonProperty("booleanOperation")]
        public long BooleanOperation { get; protected set; }

        [JsonProperty("clippingMaskMode", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClippingMaskMode { get; protected set; }

        [JsonProperty("do_objectID")]
        public string DoObjectId { get; protected set; }

        [JsonProperty("exportOptions")]
        public ExportOptions ExportOptions { get; protected set; }

        [JsonProperty("flow", NullValueHandling = NullValueHandling.Ignore)]
        public FlowConnection Flow { get; protected set; }

        [JsonProperty("frame")]
        public Rect Frame { get; protected set; }

        [JsonProperty("grid", NullValueHandling = NullValueHandling.Ignore)]
        public SimpleGrid Grid { get; protected set; }

        [JsonProperty("groupLayout", NullValueHandling = NullValueHandling.Ignore)]
        public GroupLayout GroupLayout { get; protected set; }

        [JsonProperty("hasBackgroundColor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasBackgroundColor { get; protected set; }

        [JsonProperty("hasClickThrough", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasClickThrough { get; protected set; }

        [JsonProperty("hasClippingMask", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasClippingMask { get; protected set; }

        [JsonProperty("horizontalRulerData", NullValueHandling = NullValueHandling.Ignore)]
        public RulerData HorizontalRulerData { get; protected set; }

        [JsonProperty("includeBackgroundColorInExport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IncludeBackgroundColorInExport { get; protected set; }

        [JsonProperty("isFixedToViewport")]
        public bool IsFixedToViewport { get; protected set; }

        [JsonProperty("isFlippedHorizontal")]
        public bool IsFlippedHorizontal { get; protected set; }

        [JsonProperty("isFlippedVertical")]
        public bool IsFlippedVertical { get; protected set; }

        [JsonProperty("isFlowHome", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsFlowHome { get; protected set; }

        [JsonProperty("isLocked")]
        public bool IsLocked { get; protected set; }

        [JsonProperty("isVisible")]
        public bool IsVisible { get; protected set; }

        [JsonProperty("layerListExpandedType")]
        public long LayerListExpandedType { get; protected set; }

        /// <summary>
        /// Artboards can contain any layer or layer group except root layers such as other artboards
        /// and symbol sources
        ///
        /// Symbol sources can contain any layer or layer group except root layers such as artboards
        /// and other symbol sources
        /// </summary>
        [JsonProperty("layers", NullValueHandling = NullValueHandling.Ignore)]
        public OriginalMasterLayer[] Layers { get; protected set; }

        [JsonProperty("layout", NullValueHandling = NullValueHandling.Ignore)]
        public LayoutGrid Layout { get; protected set; }

        [JsonProperty("maintainScrollPosition", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MaintainScrollPosition { get; protected set; }

        [JsonProperty("name")]
        public string Name { get; protected set; }

        [JsonProperty("nameIsFixed")]
        public bool NameIsFixed { get; protected set; }

        [JsonProperty("presetDictionary", NullValueHandling = NullValueHandling.Ignore)]
        public LayerPresetDictionary PresetDictionary { get; protected set; }

        [JsonProperty("resizesContent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ResizesContent { get; protected set; }

        /// <summary>
        /// Bitfield representing the resizing constraint
        /// </summary>
        [JsonProperty("resizingConstraint")]
        public long ResizingConstraint { get; protected set; }

        [JsonProperty("resizingType")]
        public long ResizingType { get; protected set; }

        [JsonProperty("rotation")]
        public double Rotation { get; protected set; }

        [JsonProperty("sharedStyleID", NullValueHandling = NullValueHandling.Ignore)]
        public string SharedStyleId { get; protected set; }

        [JsonProperty("shouldBreakMaskChain")]
        public bool ShouldBreakMaskChain { get; protected set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; protected set; }

        [JsonProperty("userInfo", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, dynamic> UserInfo { get; protected set; }

        [JsonProperty("verticalRulerData", NullValueHandling = NullValueHandling.Ignore)]
        public RulerData VerticalRulerData { get; protected set; }

        [JsonProperty("edited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Edited { get; protected set; }

        [JsonProperty("isClosed", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsClosed { get; protected set; }

        [JsonProperty("pointRadiusBehaviour", NullValueHandling = NullValueHandling.Ignore)]
        public long? PointRadiusBehaviour { get; protected set; }

        [JsonProperty("points", NullValueHandling = NullValueHandling.Ignore)]
        public CurvePoint[] Points { get; protected set; }

        [JsonProperty("numberOfPoints", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfPoints { get; protected set; }

        [JsonProperty("fixedRadius", NullValueHandling = NullValueHandling.Ignore)]
        public double? FixedRadius { get; protected set; }

        [JsonProperty("hasConvertedToNewRoundCorners", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasConvertedToNewRoundCorners { get; protected set; }

        [JsonProperty("needsConvertionToNewRoundCorners", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NeedsConvertionToNewRoundCorners { get; protected set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? Radius { get; protected set; }

        [JsonProperty("isEquilateral", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEquilateral { get; protected set; }

        [JsonProperty("windingRule", NullValueHandling = NullValueHandling.Ignore)]
        public long? WindingRule { get; protected set; }

        [JsonProperty("attributedString", NullValueHandling = NullValueHandling.Ignore)]
        public AttributedString AttributedString { get; protected set; }

        [JsonProperty("automaticallyDrawOnUnderlyingPath", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AutomaticallyDrawOnUnderlyingPath { get; protected set; }

        [JsonProperty("dontSynchroniseWithSymbol", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DontSynchroniseWithSymbol { get; protected set; }

        [JsonProperty("glyphBounds", NullValueHandling = NullValueHandling.Ignore)]
        public string GlyphBounds { get; protected set; }

        [JsonProperty("lineSpacingBehaviour", NullValueHandling = NullValueHandling.Ignore)]
        public long? LineSpacingBehaviour { get; protected set; }

        [JsonProperty("textBehaviour", NullValueHandling = NullValueHandling.Ignore)]
        public long? TextBehaviour { get; protected set; }

        [JsonProperty("allowsOverrides", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowsOverrides { get; protected set; }

        [JsonProperty("includeBackgroundColorInInstance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IncludeBackgroundColorInInstance { get; protected set; }

        [JsonProperty("overrideProperties", NullValueHandling = NullValueHandling.Ignore)]
        public OverrideProperty[] OverrideProperties { get; protected set; }

        [JsonProperty("symbolID", NullValueHandling = NullValueHandling.Ignore)]
        public string SymbolId { get; protected set; }

        [JsonProperty("horizontalSpacing", NullValueHandling = NullValueHandling.Ignore)]
        public double? HorizontalSpacing { get; protected set; }

        [JsonProperty("overrideValues", NullValueHandling = NullValueHandling.Ignore)]
        public OverrideValue[] OverrideValues { get; protected set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public double? Scale { get; protected set; }

        [JsonProperty("verticalSpacing", NullValueHandling = NullValueHandling.Ignore)]
        public double? VerticalSpacing { get; protected set; }

        [JsonProperty("clippingMask", NullValueHandling = NullValueHandling.Ignore)]
        public string ClippingMask { get; protected set; }

        [JsonProperty("fillReplacesImage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FillReplacesImage { get; protected set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public ImageElement Image { get; protected set; }

        [JsonProperty("intendedDPI", NullValueHandling = NullValueHandling.Ignore)]
        public long? IntendedDpi { get; protected set; }
    }

    public partial class LayerPresetDictionary
    {
    }

    public partial class UserValue
    {
        [JsonProperty("expandedSymbolPathsInSidebar", NullValueHandling = NullValueHandling.Ignore)]
        public dynamic[] ExpandedSymbolPathsInSidebar { get; protected set; }

        [JsonProperty("expandedTextStylePathsInPopover", NullValueHandling = NullValueHandling.Ignore)]
        public dynamic[] ExpandedTextStylePathsInPopover { get; protected set; }

        [JsonProperty("libraryListCollapsed", NullValueHandling = NullValueHandling.Ignore)]
        public long? LibraryListCollapsed { get; protected set; }

        [JsonProperty("pageListCollapsed", NullValueHandling = NullValueHandling.Ignore)]
        public long? PageListCollapsed { get; protected set; }

        [JsonProperty("pageListHeight", NullValueHandling = NullValueHandling.Ignore)]
        public long? PageListHeight { get; protected set; }

        [JsonProperty("scrollOrigin", NullValueHandling = NullValueHandling.Ignore)]
        public string ScrollOrigin { get; protected set; }

        [JsonProperty("zoomValue", NullValueHandling = NullValueHandling.Ignore)]
        public double? ZoomValue { get; protected set; }
    }

    public partial class Workspace
    {
    }

    public enum ImageRefClass { MsFontData, MsImageData, MsImmutablePage, MsPatch };

    public enum FontDataRefClass { MsFontData, MsImageData };

    /// <summary>
    /// Enumeration of the file formats that can be selected in the layer export options
    /// </summary>
    public enum ExportFileFormat { Eps, Jpg, Pdf, Png, Svg, Tiff, Webp };

    public enum PageRefClass { MsImageData, MsImmutablePage, MsPatch };

    /// <summary>
    /// Enumeration of the Apple bundle ids for the various variants of Sketch
    /// </summary>
    public enum SketchBundleIdentifier { ComBohemiancodingSketch3, ComBohemiancodingSketch3Beta, ComBohemiancodingSketch3Experimental, ComBohemiancodingSketch3FeaturePreview, ComBohemiancodingSketch3Internal, ComBohemiancodingSketch3Private, ComBohemiancodingSketch3Testing };

    /// <summary>
    /// Enumeration of the Sketch variants
    /// </summary>
    public enum SketchVariant { Appstore, Beta, Experimental, FeaturePreview, Internal, Nonappstore, Private, Testing, Unittest };

    public partial struct Value
    {
        public Reference Reference;
        public string String;

        public static implicit operator Value(Reference Reference) => new Value { Reference = Reference };
        public static implicit operator Value(string String) => new Value { String = String };
    }

    public partial class SketchFileFormatDesigner
    {
        public static SketchFileFormatDesigner FromJson(string json) => JsonConvert.DeserializeObject<SketchFileFormatDesigner>(json, SketchConverter.FileFormat.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SketchFileFormatDesigner self) => JsonConvert.SerializeObject(self, SketchConverter.FileFormat.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ImageRefClassConverter.Singleton,
                FontDataRefClassConverter.Singleton,
                ExportFileFormatConverter.Singleton,
                ValueConverter.Singleton,
                PageRefClassConverter.Singleton,
                SketchBundleIdentifierConverter.Singleton,
                SketchVariantConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= 0 && value <= 1)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double)untypedValue;
            if (value >= 0 && value <= 1)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly PurpleMinMaxValueCheckConverter Singleton = new PurpleMinMaxValueCheckConverter();
    }

    internal class ImageRefClassConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ImageRefClass) || t == typeof(ImageRefClass?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "MSFontData":
                    return ImageRefClass.MsFontData;
                case "MSImageData":
                    return ImageRefClass.MsImageData;
                case "MSImmutablePage":
                    return ImageRefClass.MsImmutablePage;
                case "MSPatch":
                    return ImageRefClass.MsPatch;
            }
            throw new Exception("Cannot unmarshal type ImageRefClass");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ImageRefClass)untypedValue;
            switch (value)
            {
                case ImageRefClass.MsFontData:
                    serializer.Serialize(writer, "MSFontData");
                    return;
                case ImageRefClass.MsImageData:
                    serializer.Serialize(writer, "MSImageData");
                    return;
                case ImageRefClass.MsImmutablePage:
                    serializer.Serialize(writer, "MSImmutablePage");
                    return;
                case ImageRefClass.MsPatch:
                    serializer.Serialize(writer, "MSPatch");
                    return;
            }
            throw new Exception("Cannot marshal type ImageRefClass");
        }

        public static readonly ImageRefClassConverter Singleton = new ImageRefClassConverter();
    }

    internal class FontDataRefClassConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FontDataRefClass) || t == typeof(FontDataRefClass?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "MSFontData":
                    return FontDataRefClass.MsFontData;
                case "MSImageData":
                    return FontDataRefClass.MsImageData;
            }
            throw new Exception("Cannot unmarshal type FontDataRefClass");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FontDataRefClass)untypedValue;
            switch (value)
            {
                case FontDataRefClass.MsFontData:
                    serializer.Serialize(writer, "MSFontData");
                    return;
                case FontDataRefClass.MsImageData:
                    serializer.Serialize(writer, "MSImageData");
                    return;
            }
            throw new Exception("Cannot marshal type FontDataRefClass");
        }

        public static readonly FontDataRefClassConverter Singleton = new FontDataRefClassConverter();
    }

    internal class FluffyMinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= -100 && value <= 100)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double)untypedValue;
            if (value >= -100 && value <= 100)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly FluffyMinMaxValueCheckConverter Singleton = new FluffyMinMaxValueCheckConverter();
    }

    internal class ExportFileFormatConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExportFileFormat) || t == typeof(ExportFileFormat?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "eps":
                    return ExportFileFormat.Eps;
                case "jpg":
                    return ExportFileFormat.Jpg;
                case "pdf":
                    return ExportFileFormat.Pdf;
                case "png":
                    return ExportFileFormat.Png;
                case "svg":
                    return ExportFileFormat.Svg;
                case "tiff":
                    return ExportFileFormat.Tiff;
                case "webp":
                    return ExportFileFormat.Webp;
            }
            throw new Exception("Cannot unmarshal type ExportFileFormat");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExportFileFormat)untypedValue;
            switch (value)
            {
                case ExportFileFormat.Eps:
                    serializer.Serialize(writer, "eps");
                    return;
                case ExportFileFormat.Jpg:
                    serializer.Serialize(writer, "jpg");
                    return;
                case ExportFileFormat.Pdf:
                    serializer.Serialize(writer, "pdf");
                    return;
                case ExportFileFormat.Png:
                    serializer.Serialize(writer, "png");
                    return;
                case ExportFileFormat.Svg:
                    serializer.Serialize(writer, "svg");
                    return;
                case ExportFileFormat.Tiff:
                    serializer.Serialize(writer, "tiff");
                    return;
                case ExportFileFormat.Webp:
                    serializer.Serialize(writer, "webp");
                    return;
            }
            throw new Exception("Cannot marshal type ExportFileFormat");
        }

        public static readonly ExportFileFormatConverter Singleton = new ExportFileFormatConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Reference>(reader);
                    return new Value { Reference = objectValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Reference != null)
            {
                serializer.Serialize(writer, value.Reference);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class PageRefClassConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PageRefClass) || t == typeof(PageRefClass?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "MSImageData":
                    return PageRefClass.MsImageData;
                case "MSImmutablePage":
                    return PageRefClass.MsImmutablePage;
                case "MSPatch":
                    return PageRefClass.MsPatch;
            }
            throw new Exception("Cannot unmarshal type PageRefClass");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PageRefClass)untypedValue;
            switch (value)
            {
                case PageRefClass.MsImageData:
                    serializer.Serialize(writer, "MSImageData");
                    return;
                case PageRefClass.MsImmutablePage:
                    serializer.Serialize(writer, "MSImmutablePage");
                    return;
                case PageRefClass.MsPatch:
                    serializer.Serialize(writer, "MSPatch");
                    return;
            }
            throw new Exception("Cannot marshal type PageRefClass");
        }

        public static readonly PageRefClassConverter Singleton = new PageRefClassConverter();
    }

    internal class SketchBundleIdentifierConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SketchBundleIdentifier) || t == typeof(SketchBundleIdentifier?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "com.bohemiancoding.sketch3":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3;
                case "com.bohemiancoding.sketch3.beta":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3Beta;
                case "com.bohemiancoding.sketch3.experimental":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3Experimental;
                case "com.bohemiancoding.sketch3.feature-preview":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3FeaturePreview;
                case "com.bohemiancoding.sketch3.internal":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3Internal;
                case "com.bohemiancoding.sketch3.private":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3Private;
                case "com.bohemiancoding.sketch3.testing":
                    return SketchBundleIdentifier.ComBohemiancodingSketch3Testing;
            }
            throw new Exception("Cannot unmarshal type SketchBundleIdentifier");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SketchBundleIdentifier)untypedValue;
            switch (value)
            {
                case SketchBundleIdentifier.ComBohemiancodingSketch3:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3");
                    return;
                case SketchBundleIdentifier.ComBohemiancodingSketch3Beta:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3.beta");
                    return;
                case SketchBundleIdentifier.ComBohemiancodingSketch3Experimental:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3.experimental");
                    return;
                case SketchBundleIdentifier.ComBohemiancodingSketch3FeaturePreview:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3.feature-preview");
                    return;
                case SketchBundleIdentifier.ComBohemiancodingSketch3Internal:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3.internal");
                    return;
                case SketchBundleIdentifier.ComBohemiancodingSketch3Private:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3.private");
                    return;
                case SketchBundleIdentifier.ComBohemiancodingSketch3Testing:
                    serializer.Serialize(writer, "com.bohemiancoding.sketch3.testing");
                    return;
            }
            throw new Exception("Cannot marshal type SketchBundleIdentifier");
        }

        public static readonly SketchBundleIdentifierConverter Singleton = new SketchBundleIdentifierConverter();
    }

    internal class SketchVariantConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SketchVariant) || t == typeof(SketchVariant?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "APPSTORE":
                    return SketchVariant.Appstore;
                case "BETA":
                    return SketchVariant.Beta;
                case "EXPERIMENTAL":
                    return SketchVariant.Experimental;
                case "FEATURE_PREVIEW":
                    return SketchVariant.FeaturePreview;
                case "INTERNAL":
                    return SketchVariant.Internal;
                case "NONAPPSTORE":
                    return SketchVariant.Nonappstore;
                case "PRIVATE":
                    return SketchVariant.Private;
                case "TESTING":
                    return SketchVariant.Testing;
                case "UNITTEST":
                    return SketchVariant.Unittest;
            }
            throw new Exception("Cannot unmarshal type SketchVariant");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SketchVariant)untypedValue;
            switch (value)
            {
                case SketchVariant.Appstore:
                    serializer.Serialize(writer, "APPSTORE");
                    return;
                case SketchVariant.Beta:
                    serializer.Serialize(writer, "BETA");
                    return;
                case SketchVariant.Experimental:
                    serializer.Serialize(writer, "EXPERIMENTAL");
                    return;
                case SketchVariant.FeaturePreview:
                    serializer.Serialize(writer, "FEATURE_PREVIEW");
                    return;
                case SketchVariant.Internal:
                    serializer.Serialize(writer, "INTERNAL");
                    return;
                case SketchVariant.Nonappstore:
                    serializer.Serialize(writer, "NONAPPSTORE");
                    return;
                case SketchVariant.Private:
                    serializer.Serialize(writer, "PRIVATE");
                    return;
                case SketchVariant.Testing:
                    serializer.Serialize(writer, "TESTING");
                    return;
                case SketchVariant.Unittest:
                    serializer.Serialize(writer, "UNITTEST");
                    return;
            }
            throw new Exception("Cannot marshal type SketchVariant");
        }

        public static readonly SketchVariantConverter Singleton = new SketchVariantConverter();
    }
}
